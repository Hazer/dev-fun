apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode project.versionCode
        versionName project.versionName

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        javaCompileOptions {
            annotationProcessorOptions {
                // We're not using any annotation processors at compile time
                // but it complains since we reference the compiler project
                includeCompileClasspath false
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        test.java.srcDirs += 'src/testData/kotlin'
    }
}

dependencies {
    // Dev Fun
    testImplementation project(':devfun-compiler')
    testImplementation project(':devfun')
    testImplementation project(':devfun-internal')

    // TestNG - http://testng.org
    testImplementation 'org.testng:testng:6.13.1'

    // Logging - https://logback.qos.ch
    testImplementation 'ch.qos.logback:logback-core:1.2.3'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'

    // Kotlin
    testImplementation "org.jetbrains.kotlin:kotlin-annotation-processing-embeddable:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-compiler:$kotlinVersion:sources" // because sources aren't auto-linking
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // Mockito - http://mockito.org/
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation 'com.nhaarman:mockito-kotlin:1.5.0'

    // Javac Tools
    def toolsJar = new File("${System.properties['java.home']}/../lib/tools.jar")
    if (!toolsJar.exists()) {
        throw new RuntimeException("Tools jar not found at ${toolsJar.canonicalPath}")
    }
    testImplementation files(toolsJar.canonicalPath)

    // Full Java
    def bootJars = System.properties.get('sun.boot.class.path').toString().split(File.pathSeparator)
    def jars = new ArrayList<File>()
    for (String path : bootJars) {
        if (path.endsWith("rt.jar")) {
            jars += new File(path)
        }
    }
    testImplementation files(jars)
}

// Configure TestNG
project.afterEvaluate {
    def tests = project.getTasksByName("testDebugUnitTest", false) + project.getTasksByName("testReleaseUnitTest", false)
    tests.forEach {
        it.doFirst {
            useTestNG()
            testLogging.showStandardStreams = true
        }
    }
}
