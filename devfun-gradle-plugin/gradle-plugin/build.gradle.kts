plugins {
    id("kotlin")
    kotlin("kapt")
}

val kotlinVersion = Dependency.kotlinVersion

dependencies {
    // DevFun
    compileOnly(project(":devfun-compiler")) // we only reference constants (DevFunProcessor's supported options)

    // Gradle
    compileOnly(gradleApi())

    // Kotlin
    compileOnly(Dependency.kotlinStdLib(kotlinVersion))
    compileOnly(Dependency.kotlinPlugin(kotlinVersion))
    compileOnly(Dependency.kotlinPluginApi(kotlinVersion))

    // Android
    compileOnly(Dependency.androidPlugin) {
        exclude(group = "org.jetbrains.kotlin")
    }

    // Google AutoService - https://github.com/google/auto/tree/master/service
    kapt(Dependency.autoService)
    compileOnly(Dependency.autoService)
}

// Force specific Kotlin version
configurations.all {
    resolutionStrategy.force(
        "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion",
        "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion",
        "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion",
        "org.jetbrains.kotlin:kotlin-gradle-plugin-api:$kotlinVersion"
    )
}

configureDokka()

afterEvaluate {
    val code = """/** Generated by build script - do not modify directly. */
package com.nextfaze.devfun.gradle.plugin

internal const val versionName = "$version"
"""

    val versionKtFile = File("$projectDir/src/main/kotlin/com/nextfaze/devfun/gradle/plugin/version.kt")
    if (versionKtFile.readText() != code) {
        versionKtFile.writeText(code)
        println("Grade plugin version.kt updated to:\n$code")
    }
}
