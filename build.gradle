import com.nextfaze.devfun.Android
import com.nextfaze.devfun.Config
import com.nextfaze.devfun.Library

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        // Annotations, Compiler, Core, HTTPD, HTTPD-FrontEnd, Inject-Dagger2, Menu, Stetho, Util-Glide, Util-LeakCanary
        classpath Config.kotlinPlugin

        // Core, HTTPD, HTTPD-FrontEnd, Inject-Dagger2, Menu, Stetho, Util-Glide, Util-LeakCanary
        classpath Config.androidPlugin

        classpath Config.dokkaPlugin
        classpath Config.dokkaAndroidPlugin

        classpath Config.bintrayPlugin

        classpath 'com.nextfaze.devfun:devfun-gradle-plugin:+'
    }
}

ext {
    publishing = project.file('publishing.gradle')
    isSnapshot = Library.isSnapshot(project)
}

allprojects {
    version = Library.deployVersion(project)
    group = GROUP
}

allprojects {
    repositories {
        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    println("\n${project.name}")
    println(">> group=${project.group}")
    println(">> artifact=${project.name}")
    println(">> version=${project.version}")

    if (project.isSnapshot) {
        configurations.all {
            // check for updates every build
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }
    }
}
println("")

ext.configureDokka = { project ->
    delegate = project

    ext.isAndroid = project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin('com.android.application')
    if (isAndroid) {
        apply plugin: 'org.jetbrains.dokka-android'
    } else {
        apply plugin: 'org.jetbrains.dokka'
    }

    dokka {
        externalDocumentationLink {
            url = new URL("https://nextfaze.github.io/dev-fun/")
        }
        dokkaFatJar = Config.dokkaFatJar
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        dependsOn 'assemble'
        includes = ['Module.md']
        linkMapping {
            dir = "src/main/java"
            url = "https://github.com/NextFaze/dev-fun/tree/master/${project.name}/src/main/java"
            suffix = "#L"
        }
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/dokkaJavadoc"
        externalDocumentationLink {
            url = new URL("https://nextfaze.github.io/dev-fun/")
        }
        dokkaFatJar = Config.dokkaFatJar
        sourceDirs += isAndroid ?
                project.android.sourceSets.main.java.srcDirs :
                project.sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        dependsOn 'dokkaJavadoc'
        from "$buildDir/dokkaJavadoc"
    }
}

ext.configurePublishing = { project ->
    delegate = project
    apply from: project.publishing
}

ext.configureAndroidLibrary = { project ->
    delegate = project
    doConfigureAndroidLibrary(project, true)
}

ext.doConfigureAndroidLibrary = { project, withPublishing ->
    delegate = project

    ext.isAndroid = true

    android {
        compileSdkVersion Android.compileSdkVersion
        buildToolsVersion Android.buildToolsVersion

        defaultConfig {
            minSdkVersion Android.minSdkVersion
            targetSdkVersion Android.targetSdkVersion
            versionCode Android.versionCode
            versionName Android.versionName(project)

            consumerProguardFile '../proguard-rules-common.pro'
            testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

            javaCompileOptions {
                annotationProcessorOptions {
                    // We're using KAPT so ignore annotationProcessor configuration dependencies
                    includeCompileClasspath false
                    if (project.isSnapshot) {
                        argument 'devfun.debug.verbose', 'true'
                    }
                }
            }

            buildConfigField "boolean", "VERSION_SNAPSHOT", project.isSnapshot.toString()
        }

        resourcePrefix "df_${project.name.replace("devfun-", "")}_"
    }

    if (withPublishing) {
        configureDokka(project)
        configurePublishing(project)
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
