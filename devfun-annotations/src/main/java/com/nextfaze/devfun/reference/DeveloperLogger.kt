@file:Suppress("unused")

package com.nextfaze.devfun.reference

import com.nextfaze.devfun.DeveloperAnnotation
import com.nextfaze.devfun.overlay.Dock
import kotlin.annotation.AnnotationRetention.SOURCE
import kotlin.annotation.AnnotationTarget.CLASS
import kotlin.annotation.AnnotationTarget.FUNCTION
import kotlin.annotation.AnnotationTarget.PROPERTY
import kotlin.annotation.AnnotationTarget.PROPERTY_GETTER

/**
 * Annotated references will be rendered as an overlay.
 *
 * TODO support FIELD (if this is desired make an issue to expedite).
 */
@Target(FUNCTION, PROPERTY, CLASS, PROPERTY_GETTER)
@Retention(SOURCE)
@DeveloperAnnotation(developerReference = true)
annotation class DeveloperLogger(
    val enabled: Boolean = true,
    val refreshRate: Long = 1000L,
    val snapToEdge: Boolean = false,
    val dock: Dock = Dock.TOP_LEFT,
    val delta: Float = 0f,
    val top: Float = 0f,
    val left: Float = 0f
)

/**
 * Properties interface for @[DeveloperLogger].
 *
 * TODO: This interface should be generated by DevFun at compile time, but as the annotations are in a separate module to the compiler
 * that itself depends on the annotations module, it is non-trivial to run the DevFun processor upon it (module dependencies become cyclic).
 */
interface DeveloperLoggerProperties {
    val enabled: Boolean get() = true
    val refreshRate: Long get() = 1000L
    val snapToEdge: Boolean get() = false
    val dock: Dock get() = Dock.TOP_LEFT
    val delta: Float get() = 0.0f
    val top: Float get() = 0.0f
    val left: Float get() = 0.0f
}
