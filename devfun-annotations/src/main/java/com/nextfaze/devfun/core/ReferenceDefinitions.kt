package com.nextfaze.devfun.core

import com.nextfaze.devfun.annotations.*
import java.lang.reflect.Field
import java.lang.reflect.Method
import kotlin.reflect.KClass

/**
 * Defines references to annotations that are annotated [DeveloperReference].
 *
 * Annotation use-sites will be noted by DevFun and wrapped by this interface.
 * An example of this is used by the `devfun-inject-dagger2` module.
 *
 * __This is an experimental feature and subject to change. External input/suggestions welcome.__
 *
 * @see DeveloperReference
 * @see Dagger2Component
 * @see DeveloperLogger
 */
interface ReferenceDefinition {
    /** The annotation that wanted the reference.*/
    val annotation: KClass<out Annotation>
}

/**
 * Declares a definition that has [properties] associated with it. The type will be `AnnotationNameProperties`.
 *
 * @see ReferenceDefinition
 * @see DeveloperFunction
 * @see DeveloperAnnotation
 */
interface WithProperties<T : Any> {
    /** Generated implementation of annotation and its properties/values as a type-safe object (where possible).  */
    val properties: T
}

/**
 * Utility function to potentially get the properties of a [ReferenceDefinition] of type [T].
 *
 * @return Properties of type [T], or `null` if definition does not have properties or type is not of type [T].
 *
 * @see getProperties
 * @see WithProperties
 */
inline fun <reified T : Any> ReferenceDefinition.withProperties(): T? =
    when {
        this is WithProperties<*> -> properties as? T
        else -> null
    }

/**
 * Utility function to get the properties of a [ReferenceDefinition] of type [T]. Will throw if types are invalid.
 *
 * @return Property object of type [T].
 *
 * @see withProperties
 * @see WithProperties
 */
inline fun <reified T : Any> ReferenceDefinition.getProperties(): T = (this as WithProperties<*>).let { properties as T }

/**
 * A reference to a method generated by [DeveloperReference].
 *
 * See [ReferenceDefinition] for more details.
 */
interface MethodReference : ReferenceDefinition {
    /**
     * The annotated method.
     *
     * TODO In the future this may be changed to resemble [FunctionDefinition.invoke]?
     */
    val method: Method
}

/**
 * A reference to a type generated by [DeveloperReference].
 *
 * See [ReferenceDefinition] for more details.
 */
interface TypeReference : ReferenceDefinition {
    /** The annotated type. */
    val type: KClass<*>
}

/**
 * A reference to a field generated by [DeveloperReference].
 *
 * See [ReferenceDefinition] for more details.
 */
interface FieldReference : ReferenceDefinition {
    /** The annotated field. */
    val field: Field
}
